<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.2.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
	<context:property-placeholder location="WEB-INF/jdbc.properties" />
	
	<task:annotation-driven />
	
    <!-- 启动@AspectJ支持 -->
    <aop:aspectj-autoproxy/>
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />
    
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize">
			<value>10</value>
		</property>
		<property name="maxActive">
			<value>30</value>
		</property>
		<property name="maxIdle">
			<value>20</value>
		</property>
		<property name="minIdle">
			<value>5</value>
		</property>
		<property name="maxWait">
			<value>9000</value>
		</property>
		<property name="removeAbandoned">
			<value>true</value>
		</property>
		<property name="removeAbandonedTimeout">
			<value>120</value>
		</property>
		<property name="testOnBorrow">
			<value>true</value>
		</property>
		<property name="testOnReturn">
			<value>true</value>
		</property>
		<property name="testWhileIdle">
			<value>true</value>
		</property>
		<property name="validationQuery">
			<value>select 1</value>
		</property>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="packagesToScan" value="com.bicsoft.sy.entity" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
	</bean>
	
	<!-- Spring JdbcTemplate 直接执行SQL语句用 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	
	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring-servlet.xml中配置的，如果不去除会影响事务管理的。--> 
	<context:component-scan base-package="com.bicsoft">
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" />
		<context:exclude-filter type="regex" expression="com.bicsoft.sy.controller.*"/>
	</context:component-scan>
	
	<!-- 下面是配置声明式事务管理的，个人感觉比用注解管理事务要简单方便 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="logicDelete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor pointcut="execution(* com.bicsoft.sy.service.*Service.*(..)) || execution(* com.bicsoft.sy.service.impl.*ServiceImpl.*(..))" advice-ref="txAdvice"/>
	</aop:config>

	<!-- 为自定义标签组件单独注册CommonDataService Bean,通过这种方式从Bean容器中直接获取实例简单 Add By WolfSoul 2015-8-19 -->
	<bean id="commonDataService" class="com.bicsoft.sy.service.impl.CommonDataServiceImpl"></bean>
	
	<!-- 为自定义标签组件单独注册一个CompanyService Bean,通过这种方式从Bean容器中直接获取实例简单 Add By WolfSoul 2015-8-19 -->
	<bean id="companyService" class="com.bicsoft.sy.service.impl.CompanyServiceImpl"></bean>
	
	<!-- 为自定义标签组件单独注册一个YearCodeService Bean,通过这种方式从Bean容器中直接获取实例简单 Add By WolfSoul 2015-8-19 -->
	<bean id="yearCodeService" class="com.bicsoft.sy.service.impl.YearCodeServiceImpl"></bean>
	
	<!-- 为自定义标签组件单独注册一个SeedVarietyService Bean,通过这种方式从Bean容器中直接获取实例简单 Add By WolfSoul 2015-8-19 -->
	<bean id="seedVarietyService" class="com.bicsoft.sy.service.impl.SeedVarietyServiceImpl"></bean>
	
	<!-- 为自定义标签组件单独注册一个AreaDevisionService Bean,通过这种方式从Bean容器中直接获取实例简单 Add By WolfSoul 2015-8-19 -->
	<bean id="areaDevisionService" class="com.bicsoft.sy.service.impl.AreaDevisionServiceImpl"></bean>

</beans>
